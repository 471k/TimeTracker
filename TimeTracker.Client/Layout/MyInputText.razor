@using System.Diagnostics.CodeAnalysis
@using System.Linq.Expressions
@inherits InputBase<string>

<div>
    @if(!string.IsNullOrWhiteSpace(@Label))
    {
        <label for="@Id" class="block text-sm font-medium text-gray-700 mt-2">@Label</label>
    }

    <input id="@Id" 
           type="@Type" 
           @bind="@CurrentValue"
           class="mt-0.5 p-2 w-full rounded border-gray-300 shadow-sm sm:text-sm" />

    <div class="text-xs text-red-600 font-bold my-1">
        <ValidationMessage For="@ValidationFor" />
    </div>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string? Label { get; set; }
    [Parameter]
    public string? Type { get; set; } = "text";
    [Parameter]
    public Expression<Func<string>> ValidationFor { get; set; } = default;

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = string.Empty;
        return true;
    }
}
